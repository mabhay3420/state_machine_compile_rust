1/20
Switch statement with actual index movement logic
 - Need to verify by priting the index value

Next Steps:
    - Print tape content
        - Right now sym index only
    - Implement printing symbol to tape logic
        - Verify that things are actually getting written to the tape
    - Implementing final state ( update to state_index_ptr logic )


- state_index should be initialised based on intial_state specified
- sym_index should be set based on what the current tape content is
    - load tape_index_ptr
    - get i32 value in tape array
    - store that i32 value in sym_index_ptr

1/19
Working LLVM IR:
- A working loop with a switch statement inside it
    - Runs for number of steps
    - Switch statement is on current symbol index
        - Being updated +2 in each loop


Next steps:
    - At each step of the loop
        - Increment the index ptr(clipping it if it goes over array length)
        - Store the current symbol index in array
    - Print the array in the end

    - The only thing that remains to be done is
        - Update the symbol index based on condition
            - Iterate over condition vector 
            - Collect all of them in a single vector
                - It will have (initial_state, current_symbol_requirement, updates(write, move left or right), final_state)
                - this should be translated to (state_index, current_symbol_index,updates to array and its index- in symbol index format, next_state_index)




1. Test with multiple state machines and verify the output.
2. Read up about llvm, its rust bindings and try to generate the code in llvm IR.

Considerations:
1. Disallow utf-8 characters in the input file.
2. Validate the parse tree in the end, resulting in better error messages and cleaner code.